#!/usr/bin/env python
# -*- coding: utf-8 -*-

number = """

"""

# pylint: disable=C0103
number = number.strip()

current = 0
max_v = 0

# iterate through the number
# if the algorithm finds a 0 it resets the starting digit of the sequence
# to the digit immediately after the 0
# then, it initializes by looping through all thirteen digits

# once the current is initialized it gets the next series by dividing by its
# (previous) first number and multiplying by the new digit
# if this new digit is again 0, it resets
for i in xrange(len(number)-12):
    if current == 0:
        current = 1
        for idx, ch in enumerate(number[i:i+13]):
            if int(ch) == 0:
                current = 0
                i += idx
                continue
            else:
                current *= int(ch)
        max_v = max(current, max_v)
    else:
        if int(number[i+12]) == 0:
            current = 0
        else:
            # scoot the series up by one
            current *= int(number[i+12])
            current /= int(number[i-1])
            max_v = max(current, max_v)
print max_v
